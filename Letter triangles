/*
  c o d e w a r s
c is 3
o is 15
15+3=18
18. letter in the alphabet is r
then append r
next is o d
sum is 19
append s
do this until you iterate through whole string
now, string is rsibxsk
repeat whole cycle until you reach 1 character
then return the char
output is l
codewars -> l
triangle -> d
C O D E W A R S
 R S I B X S K
  K B K Z Q D
   M M K Q U
    Z X B L
     X Z N
      X N
       L
A B C D
 C E G
  H L
   T
More examples

youhavechosentotranslatethiskata -> a
cod -> k
yes -> b
hours -> y
circlecipher -> z
lettertriangles -> o
cod -> rs -> k
abcd -> ceg -> hl -> t
codewars -> rsibxsk -> kbkzqd -> mmkqu -> zxbl -> xzn -> xn -> l
Note, if the sum is bigger than 26 then start over

input will always be lowercase letters

random tests contains strings up to 30 chars
*/

function triangle(row) {
  if (row.length === 1) return row;
  let left = 0;
  let right = 1;
  const alphabetToNum = buildMap();
  const numToAlphabet = buildReverseMap();
  
  let currentWord = ""
  
   while (true) {
     let num = alphabetToNum.get(row[left]) + alphabetToNum.get(row[right]); 
     
     if (num > 26) num -= 26;
    
     let letter = numToAlphabet.get(num);
     currentWord += letter;
     left++;
     right++;
     
     if (right === row.length) {
       row = currentWord;
       currentWord = "";
       left = 0;
       right = 1;
       if (row.length === 1) break;
     } 
   }
  return row;
  
}

function buildMap() {
  let str = 'abcdefghijklmnopqrstuvwxyz'
  let map = new Map();
  for (let i = 0; i < str.length; i++) {
    map.set(str[i], i + 1 );
  }
  return map;
}

function buildReverseMap() {
  let str = 'abcdefghijklmnopqrstuvwxyz'
  let map = new Map();
  for (let i = 0; i < str.length; i++) {
    map.set(i + 1, str[i])
  }
  return map;
}
